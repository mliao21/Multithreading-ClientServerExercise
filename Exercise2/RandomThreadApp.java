import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * @author MELISSA LIAO
 *
 */
public class RandomThreadApp {
	
	private ExecutorService pool;
	
	public RandomThreadApp() {
		this.pool = Executors.newFixedThreadPool(5);
	}
	
	public static void main(String args[]) {
		int min = 1;
		int max = 100;
		
		// One instantiation of randomizer to store
		// multiple random numbers
		Randomizer r = new Randomizer(min, max);
		
		// One thread pool is used to run the randomizer
		RandomThreadApp t = new RandomThreadApp();
		
		// Thread pool creates and executes 5 threads
		for(int i = 0; i < 5; i++)
			t.pool.execute(r);

		try {     
			t.pool.shutdown(); // Thread pool shutdown once finishes running randomizer
	         while (!t.pool.awaitTermination(24L, TimeUnit.HOURS)) {
	             System.out.println("Not yet. Still waiting for termination");
	         }                
	    }catch(InterruptedException e){
	        e.printStackTrace();
	    }
		
		// After all threads had finished running, main thread will print out 
		// all random values stored from ArrayList in Randomizer class
		System.out.println("\nValues generated by all 5 threads: ");
		for(Integer rand: r.getValue())
			System.out.print(rand + "  ");
		
		// Call in the sum variable to retrieve the sum all generated random values
		System.out.println("\nSum of random numbers = " + r.getSum());
			
	}

}
